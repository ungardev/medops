/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/appointments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["appointments_list"];
        put?: never;
        post: operations["appointments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/appointments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["appointments_retrieve"];
        put: operations["appointments_update"];
        post?: never;
        delete: operations["appointments_destroy"];
        options?: never;
        head?: never;
        patch: operations["appointments_partial_update"];
        trace?: never;
    };
    "/api/appointments/{id}/notes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["appointments_notes_partial_update"];
        trace?: never;
    };
    "/api/appointments/{id}/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["appointments_status_partial_update"];
        trace?: never;
    };
    "/api/appointments/today/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["appointments_today_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit/aggregates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["audit_aggregates_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit/appointment/{appointment_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["audit_appointment_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit/patient/{patient_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["audit_patient_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultation/current/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Devuelve la cita que actualmente estÃ¡ en estado 'in_consultation'. */
        get: operations["consultation_current_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["dashboard_summary_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["events_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["metrics_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["patients_list"];
        put?: never;
        post: operations["patients_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["patients_retrieve"];
        put: operations["patients_update"];
        post?: never;
        delete: operations["patients_destroy"];
        options?: never;
        head?: never;
        patch: operations["patients_partial_update"];
        trace?: never;
    };
    "/api/patients/{id}/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["patients_payments_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patients/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["patients_search_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["payments_list"];
        put?: never;
        post: operations["payments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["payments_retrieve"];
        put: operations["payments_update"];
        post?: never;
        delete: operations["payments_destroy"];
        options?: never;
        head?: never;
        patch: operations["payments_partial_update"];
        trace?: never;
    };
    "/api/payments/summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["payments_summary_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/waived/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["payments_waived_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/waitingroom/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["waitingroom_list"];
        put?: never;
        post: operations["waitingroom_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/waitingroom/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["waitingroom_retrieve"];
        put: operations["waitingroom_update"];
        post?: never;
        delete: operations["waitingroom_destroy"];
        options?: never;
        head?: never;
        patch: operations["waitingroom_partial_update"];
        trace?: never;
    };
    "/api/waitingroom/{id}/status/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["waitingroom_status_partial_update"];
        trace?: never;
    };
    "/api/waitingroom/groups-today/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["waitingroom_groups_today_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/waitingroom/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["waitingroom_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Appointment: {
            readonly id: number;
            readonly patient: components["schemas"]["PatientRead"];
            /** Format: date */
            appointment_date: string;
            /** Tipo de consulta */
            appointment_type?: components["schemas"]["AppointmentTypeEnum"];
            /**
             * Monto esperado
             * Format: decimal
             */
            expected_amount?: string;
            status?: components["schemas"]["AppointmentStatusEnum"];
            /** Format: time */
            arrival_time?: string | null;
            notes?: string | null;
        };
        AppointmentRequest: {
            /** Format: date */
            appointment_date: string;
            /** Tipo de consulta */
            appointment_type?: components["schemas"]["AppointmentTypeEnum"];
            /**
             * Monto esperado
             * Format: decimal
             */
            expected_amount?: string;
            status?: components["schemas"]["AppointmentStatusEnum"];
            /** Format: time */
            arrival_time?: string | null;
            notes?: string | null;
        };
        /**
         * @description * `pending` - Pending
         *     * `arrived` - Arrived
         *     * `in_consultation` - In Consultation
         *     * `completed` - Completed
         *     * `canceled` - Canceled
         * @enum {string}
         */
        AppointmentStatusEnum: "pending" | "arrived" | "in_consultation" | "completed" | "canceled";
        /**
         * @description * `general` - Consulta General
         *     * `specialized` - Consulta Especializada
         * @enum {string}
         */
        AppointmentTypeEnum: "general" | "specialized";
        /** @enum {unknown} */
        BlankEnum: "";
        /**
         * @description * `A+` - A+
         *     * `A-` - A-
         *     * `B+` - B+
         *     * `B-` - B-
         *     * `AB+` - AB+
         *     * `AB-` - AB-
         *     * `O+` - O+
         *     * `O-` - O-
         * @enum {string}
         */
        BloodTypeEnum: "A+" | "A-" | "B+" | "B-" | "AB+" | "AB-" | "O+" | "O-";
        DashboardSummary: {
            total_patients: number;
            total_appointments: number;
            completed_appointments: number;
            pending_appointments: number;
            total_payments: number;
            total_events: number;
            total_waived: number;
            /** Format: double */
            total_payments_amount: number;
            /** Format: double */
            estimated_waived_amount: number;
            /** Format: double */
            financial_balance: number;
            appointments_trend: unknown[];
            payments_trend: unknown[];
            balance_trend: unknown[];
        };
        /**
         * @description * `M` - Male
         *     * `F` - Female
         *     * `Unknown` - Unknown
         * @enum {string}
         */
        GenderEnum: "M" | "F" | "Unknown";
        /**
         * @description * `cash` - Efectivo
         *     * `card` - Tarjeta
         *     * `transfer` - Transferencia
         * @enum {string}
         */
        MethodEnum: "cash" | "card" | "transfer";
        /** @enum {unknown} */
        NullEnum: null;
        PatchedAppointmentNotesUpdateRequest: {
            notes?: string;
        };
        PatchedAppointmentRequest: {
            /** Format: date */
            appointment_date?: string;
            /** Tipo de consulta */
            appointment_type?: components["schemas"]["AppointmentTypeEnum"];
            /**
             * Monto esperado
             * Format: decimal
             */
            expected_amount?: string;
            status?: components["schemas"]["AppointmentStatusEnum"];
            /** Format: time */
            arrival_time?: string | null;
            notes?: string | null;
        };
        PatchedAppointmentStatusUpdateRequest: {
            status?: string;
        };
        /** @description Serializer para crear/actualizar pacientes */
        PatchedPatientWriteRequest: {
            first_name?: string;
            middle_name?: string | null;
            last_name?: string;
            second_last_name?: string | null;
            /** CÃ©dula de Identidad */
            national_id?: string | null;
            /** Format: date */
            birthdate?: string | null;
            gender?: (components["schemas"]["GenderEnum"] | components["schemas"]["NullEnum"]) | null;
            contact_info?: string | null;
            /**
             * Correo electrÃ³nico
             * Format: email
             */
            email?: string | null;
            /** DirecciÃ³n */
            address?: string | null;
            /** Format: decimal */
            weight?: string | null;
            /** Format: decimal */
            height?: string | null;
            blood_type?: (components["schemas"]["BloodTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            allergies?: string | null;
            medical_history?: string | null;
            active?: boolean;
        };
        PatchedPaymentRequest: {
            appointment?: number;
            /** Format: decimal */
            amount?: string;
            method?: components["schemas"]["MethodEnum"];
            status?: components["schemas"]["PaymentStatusEnum"];
            /** NÃºmero de referencia / comprobante */
            reference_number?: string | null;
            /** Banco emisor (si aplica) */
            bank_name?: string | null;
            /** Recibido por */
            received_by?: string | null;
        };
        PatchedWaitingRoomEntryRequest: {
            /** Format: date-time */
            arrival_time?: string;
            status?: components["schemas"]["WaitingRoomEntryStatusEnum"];
            priority?: components["schemas"]["PriorityEnum"];
            order?: number;
        };
        PatchedWaitingRoomStatusUpdateRequest: {
            status?: string;
        };
        /** @description Serializer completo para la vista detallada */
        PatientDetail: {
            readonly id: number;
            readonly full_name: string;
            /** CÃ©dula de Identidad */
            national_id?: string | null;
            first_name: string;
            middle_name?: string | null;
            last_name: string;
            second_last_name?: string | null;
            /** Format: date */
            birthdate?: string | null;
            gender?: components["schemas"]["GenderEnum"];
            contact_info?: string | null;
            /**
             * Correo electrÃ³nico
             * Format: email
             */
            email?: string | null;
            /** DirecciÃ³n */
            address?: string | null;
            /** Format: decimal */
            weight?: string | null;
            /** Format: decimal */
            height?: string | null;
            blood_type?: (components["schemas"]["BloodTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            allergies?: string | null;
            medical_history?: string | null;
            active?: boolean;
            /** Format: date-time */
            readonly created_at: string | null;
            /** Format: date-time */
            readonly updated_at: string | null;
        };
        /** @description Serializer ligero para listas */
        PatientRead: {
            readonly id: number;
            readonly full_name: string;
            /** CÃ©dula de Identidad */
            national_id?: string | null;
            /**
             * Correo electrÃ³nico
             * Format: email
             */
            email?: string | null;
        };
        /** @description Serializer ligero para listas */
        PatientReadRequest: {
            /** CÃ©dula de Identidad */
            national_id?: string | null;
            /**
             * Correo electrÃ³nico
             * Format: email
             */
            email?: string | null;
        };
        /** @description Serializer para crear/actualizar pacientes */
        PatientWrite: {
            readonly id: number;
            first_name: string;
            middle_name?: string | null;
            last_name: string;
            second_last_name?: string | null;
            /** CÃ©dula de Identidad */
            national_id?: string | null;
            /** Format: date */
            birthdate?: string | null;
            gender?: (components["schemas"]["GenderEnum"] | components["schemas"]["NullEnum"]) | null;
            contact_info?: string | null;
            /**
             * Correo electrÃ³nico
             * Format: email
             */
            email?: string | null;
            /** DirecciÃ³n */
            address?: string | null;
            /** Format: decimal */
            weight?: string | null;
            /** Format: decimal */
            height?: string | null;
            blood_type?: (components["schemas"]["BloodTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            allergies?: string | null;
            medical_history?: string | null;
            active?: boolean;
        };
        /** @description Serializer para crear/actualizar pacientes */
        PatientWriteRequest: {
            first_name: string;
            middle_name?: string | null;
            last_name: string;
            second_last_name?: string | null;
            /** CÃ©dula de Identidad */
            national_id?: string | null;
            /** Format: date */
            birthdate?: string | null;
            gender?: (components["schemas"]["GenderEnum"] | components["schemas"]["NullEnum"]) | null;
            contact_info?: string | null;
            /**
             * Correo electrÃ³nico
             * Format: email
             */
            email?: string | null;
            /** DirecciÃ³n */
            address?: string | null;
            /** Format: decimal */
            weight?: string | null;
            /** Format: decimal */
            height?: string | null;
            blood_type?: (components["schemas"]["BloodTypeEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            allergies?: string | null;
            medical_history?: string | null;
            active?: boolean;
        };
        Payment: {
            readonly id: number;
            appointment: number;
            /** Format: date */
            readonly appointment_date: string;
            readonly patient: components["schemas"]["PatientRead"];
            /** Format: decimal */
            amount: string;
            method: components["schemas"]["MethodEnum"];
            status?: components["schemas"]["PaymentStatusEnum"];
            /** NÃºmero de referencia / comprobante */
            reference_number?: string | null;
            /** Banco emisor (si aplica) */
            bank_name?: string | null;
            /** Recibido por */
            received_by?: string | null;
            /**
             * Fecha de registro
             * Format: date-time
             */
            readonly received_at: string | null;
        };
        PaymentRequest: {
            appointment: number;
            /** Format: decimal */
            amount: string;
            method: components["schemas"]["MethodEnum"];
            status?: components["schemas"]["PaymentStatusEnum"];
            /** NÃºmero de referencia / comprobante */
            reference_number?: string | null;
            /** Banco emisor (si aplica) */
            bank_name?: string | null;
            /** Recibido por */
            received_by?: string | null;
        };
        /**
         * @description * `pending` - Pendiente
         *     * `paid` - Pagado
         *     * `canceled` - Cancelado
         *     * `waived` - Exonerado
         * @enum {string}
         */
        PaymentStatusEnum: "pending" | "paid" | "canceled" | "waived";
        /**
         * @description * `scheduled` - Scheduled
         *     * `walkin` - Walk-in
         *     * `emergency` - Emergency
         * @enum {string}
         */
        PriorityEnum: "scheduled" | "walkin" | "emergency";
        RegisterArrivalRequest: {
            patient_id: number;
            appointment_id?: number;
            is_emergency?: boolean;
        };
        WaitingRoomEntry: {
            readonly id: number;
            readonly patient: components["schemas"]["PatientRead"];
            readonly appointment_id: number;
            /** Format: date-time */
            arrival_time?: string;
            status?: components["schemas"]["WaitingRoomEntryStatusEnum"];
            priority?: components["schemas"]["PriorityEnum"];
            order?: number;
        };
        WaitingRoomEntryRequest: {
            /** Format: date-time */
            arrival_time?: string;
            status?: components["schemas"]["WaitingRoomEntryStatusEnum"];
            priority?: components["schemas"]["PriorityEnum"];
            order?: number;
        };
        /**
         * @description * `waiting` - Waiting
         *     * `in_consultation` - In Consultation
         *     * `completed` - Completed
         *     * `canceled` - Canceled
         * @enum {string}
         */
        WaitingRoomEntryStatusEnum: "waiting" | "in_consultation" | "completed" | "canceled";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    appointments_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"][];
                };
            };
        };
    };
    appointments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppointmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AppointmentRequest"];
                "multipart/form-data": components["schemas"]["AppointmentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
        };
    };
    appointments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Appointment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
        };
    };
    appointments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Appointment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppointmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AppointmentRequest"];
                "multipart/form-data": components["schemas"]["AppointmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
        };
    };
    appointments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Appointment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    appointments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Appointment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAppointmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAppointmentRequest"];
                "multipart/form-data": components["schemas"]["PatchedAppointmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
        };
    };
    appointments_notes_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAppointmentNotesUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAppointmentNotesUpdateRequest"];
                "multipart/form-data": components["schemas"]["PatchedAppointmentNotesUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
        };
    };
    appointments_status_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAppointmentStatusUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAppointmentStatusUpdateRequest"];
                "multipart/form-data": components["schemas"]["PatchedAppointmentStatusUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
        };
    };
    appointments_today_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"][];
                };
            };
        };
    };
    audit_aggregates_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resumen agregado de auditorÃ­a */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    audit_appointment_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                appointment_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description AuditorÃ­a por cita */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    audit_patient_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                patient_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description AuditorÃ­a por paciente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    consultation_current_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Appointment"];
                };
            };
        };
    };
    dashboard_summary_retrieve: {
        parameters: {
            query?: {
                end_date?: string;
                start_date?: string;
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardSummary"];
                };
            };
        };
    };
    events_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Eventos de auditorÃ­a */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    metrics_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description MÃ©tricas del dÃ­a */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patients_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientRead"][];
                };
            };
        };
    };
    patients_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientWriteRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientWriteRequest"];
                "multipart/form-data": components["schemas"]["PatientWriteRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientWrite"];
                };
            };
        };
    };
    patients_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Patient. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientDetail"];
                };
            };
        };
    };
    patients_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Patient. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientWriteRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatientWriteRequest"];
                "multipart/form-data": components["schemas"]["PatientWriteRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientWrite"];
                };
            };
        };
    };
    patients_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Patient. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patients_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Patient. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatientWriteRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPatientWriteRequest"];
                "multipart/form-data": components["schemas"]["PatchedPatientWriteRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientWrite"];
                };
            };
        };
    };
    patients_payments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Patient. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientRead"];
                };
            };
        };
    };
    patients_search_list: {
        parameters: {
            query?: {
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientRead"][];
                };
            };
        };
    };
    payments_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
        };
    };
    payments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequest"];
                "multipart/form-data": components["schemas"]["PaymentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    payments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    payments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PaymentRequest"];
                "multipart/form-data": components["schemas"]["PaymentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    payments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    payments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Payment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPaymentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPaymentRequest"];
                "multipart/form-data": components["schemas"]["PatchedPaymentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
        };
    };
    payments_summary_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
        };
    };
    payments_waived_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"][];
                };
            };
        };
    };
    waitingroom_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitingRoomEntry"][];
                };
            };
        };
    };
    waitingroom_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WaitingRoomEntryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WaitingRoomEntryRequest"];
                "multipart/form-data": components["schemas"]["WaitingRoomEntryRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitingRoomEntry"];
                };
            };
        };
    };
    waitingroom_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Waiting Room Entry. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitingRoomEntry"];
                };
            };
        };
    };
    waitingroom_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Waiting Room Entry. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WaitingRoomEntryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["WaitingRoomEntryRequest"];
                "multipart/form-data": components["schemas"]["WaitingRoomEntryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitingRoomEntry"];
                };
            };
        };
    };
    waitingroom_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Waiting Room Entry. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    waitingroom_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Waiting Room Entry. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWaitingRoomEntryRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWaitingRoomEntryRequest"];
                "multipart/form-data": components["schemas"]["PatchedWaitingRoomEntryRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitingRoomEntry"];
                };
            };
        };
    };
    waitingroom_status_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWaitingRoomStatusUpdateRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWaitingRoomStatusUpdateRequest"];
                "multipart/form-data": components["schemas"]["PatchedWaitingRoomStatusUpdateRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitingRoomEntry"];
                };
            };
        };
    };
    waitingroom_groups_today_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Grupos de sala de espera para hoy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    waitingroom_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterArrivalRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RegisterArrivalRequest"];
                "multipart/form-data": components["schemas"]["RegisterArrivalRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitingRoomEntry"];
                };
            };
        };
    };
}
